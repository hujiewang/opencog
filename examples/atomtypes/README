
                      Custom Atom Types Example
                      -------------------------

This directory provides an example of how to add new, custom atom types
to the cogserver.  Currently, the only way to add new, custom types is
to define them in an atom_types.script file, and then write some C++
code that causes the script file to be compiled, and the new types to be
loaded.  Fortunately, the C++ code is very easy to create: a simple
cut-n-paste of the code here is enough.

The new atom types are loaded into the cogserver when the example module
is loaded.  To load this module, and use the atom types, do this:

*) Start the cogserver: From a shell prompt, issue the command
   ./opencog/server/cogserver from the build directory

*) Connect to the server: telnet localhost 17001

*) At the cogserver prompt, issue the command:
   opencog> loadmodule examples/atomtypes/libcustomatomtypes.so
   You should see 'done' printed on a line by itself.

*) At the cogserver prompt, issue the command 'listmodules', and verify
   that the module was loaded. You should see the following printed:
   Filename: libcustomatomtypes.so, ID: opencog::CustomAtomTypesModule

*) Use the new atom types.  During compilation, a scheme wrapper for
   the new atom types should have been created, in the build directory
   ./examples/atomtypes/example_types.scm

   Load this file.  From a shell prompt, say:
   cat examples/atomtypes/example_types.scm | telnet localhost 17001

*) Use the new atom types. From the cogserver prompt, start the scheme
   shell, and create some atoms:

   opencog> scm
   guile> (FooNode "asdf")
   (FooNode "asdf")

   guile> (define xxx (ListLink (FooNode "hee") (BarNode "haw")))

   guile> xxx
   (ListLink
      (FooNode "hee")
      (BarNode "haw")
   )

   guile>

That's all folks .. the rest is up to you.

