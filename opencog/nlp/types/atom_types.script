//
// Script for automatic "atom type" generation. For more more information,
// consult  the documentation in the opencog/atomspace/README file.
//
// Please note: some of the types below are used only via the scheme bindings.
// Thus, just because you can comment some of these out, and the code still
// compiles, that does not mean that these types are unused!  Be sure to grep
// for the CamelCase names, to see if they show up elsewhere!
//
// ====================================================================
// Older parsing and language handling nodes;
// Commented out, as these are currently unused,
// and are being replaced by newer RelEx forms.
// Some of these may be revived. See below.
//
// PHRASE_NODE <- NODE
// COLLOCATION_NODE <- WORD_NODE
// SEQUENCE_LINK <- ORDERED_LINK
//
// TENSE_LINK <- FEATURE_LINK
// QUANTITY_LINK <- FEATURE_LINK
// NOUN_NUMBER_LINK <- FEATURE_LINK
// WORD_GENDER_LINK <- FEATURE_LINK
//
// TENSE_NODE <- FEATURE_NODE
// NOUN_NUMBER_NODE <- FEATURE_NODE
// WORD_GENDER_NODE <- FEATURE_NODE
// FLAG_NODE <- NODE
//
// QUERY_VARIABLE_LINK <- ORDERED_LINK
//

WORD_NODE <- NODE
ANY_NODE <- NODE    // Explicit wildcard node. 
REFERENCE_LINK <- ORDERED_LINK

// Custom atoms to identify documents, sentences, word instances
// These are emitted by RelEx and are used to input text into OpenCog.
DOCUMENT_NODE <- CONCEPT_NODE
SENTENCE_NODE <- CONCEPT_NODE
SENTENCE_LINK <- ASSOCIATIVE_LINK
PARSE_NODE <- CONCEPT_NODE
PARSE_LINK <- ASSOCIATIVE_LINK
WORD_INSTANCE_NODE <- CONCEPT_NODE
WORD_INSTANCE_LINK <- ASSOCIATIVE_LINK

// These are used to number the sequence in which words,
// sentences and documents are observed.  Use these with
// GreaterThanLink to find out what order things came in.
SEQUENCE_LINK <- ASSOCIATIVE_LINK
WORD_SEQUENCE_LINK <- SEQUENCE_LINK
SENTENCE_SEQUENCE_LINK <- SEQUENCE_LINK
DOCUMENT_SEQUENCE_LINK <- SEQUENCE_LINK

// Custom atoms to identify features, relations
// Note that the feature links could (should ??) be replaced by
// predicate links, where the feature type is encoded in the
// predicate name, rather than in the link type.  However, there
// is no immediate need for this, and custom link-types use less RAM.
// So we define a bunch of custom link types.
FEATURE_NODE <- CONCEPT_NODE
FEATURE_LINK <- ORDERED_LINK
LINK_GRAMMAR_RELATIONSHIP_NODE <- PREDICATE_NODE   // e.g. "MX+"
LINK_GRAMMAR_DISJUNCT_NODE <- PREDICATE_NODE       // e.g. "S- O+ "

// Used to represent RelEx dependency relations
DEFINED_LINGUISTIC_CONCEPT_NODE <- FEATURE_NODE
DEFINED_LINGUISTIC_RELATIONSHIP_NODE <- PREDICATE_NODE // e.g. _subj, _obj
PREPOSITIONAL_RELATIONSHIP_NODE <- PREDICATE_NODE  // e.g. of, next, to

// New wordnet-import nodes, added by Linas.
// These are subject to change, pending review.
// See nlp/wordnet-import/README and nlp/wsd/README for details.
// LEMMA_NODE appears to be currently unused.
WORD_SENSE_NODE <- CONCEPT_NODE
WORD_SENSE_LINK <- ASSOCIATIVE_LINK
PART_OF_SPEECH_NODE <- FEATURE_NODE
PART_OF_SPEECH_LINK <- FEATURE_LINK
LEMMA_NODE <- CONCEPT_NODE
LEMMA_LINK <- ORDERED_LINK
HOLONYM_LINK <- INHERITANCE_LINK

// New word-sense-disambiguation nodes, added by Linas
// See nlp/wsd/README for details.
COSENSE_LINK <- UNORDERED_LINK

// Concept-formation anchors.
// See nlp/seme/README for details.
SEME_NODE <- CONCEPT_NODE
SEMANTIC_RELATION_NODE <- SEME_NODE
// CONTEXT_NODE <- CONCEPT_NODE // apparently useless

// Atoms to identify different interpreations of a single parse.
// Added for Relex2Logic processing of meanings in sentences.
INTERPRETATION_NODE <- NODE
INTERPRETATION_LINK <- LINK
SPECIFIC_ENTITY_NODE <- NODE
