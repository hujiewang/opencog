/*
 * tests/scm/MultiAtomSpace.cxxtest
 *
 * Copyright (C) 2009, 2011, 2014 Linas Vepstas <linasvepstas@gmail.com>
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/guile/load-file.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/guile/SchemeSmob.h>
#include <opencog/server/CogServer.h>
#include <opencog/util/Config.h>
#include <opencog/util/Logger.h>

using namespace opencog;

class MultiAtomSpace :  public CxxTest::TestSuite
{
	private:
		SchemeEval* evaluator;
		Handle disorder;
		Handle disordered;
		Handle disor_more;

	public:

		MultiAtomSpace(void)
		{
			try
			{
				config().load("opencog-test.conf");
			}
			catch (RuntimeException &e)
			{
				std::cerr << e.getMessage() << std::endl;
			}
			logger().setFilename(config()["LOG_FILE"]);
			logger().setLevel(Logger::getLevelFromString(config()["LOG_LEVEL"]));
			logger().setPrintToStdoutFlag(config().get_bool("LOG_TO_STDOUT"));

			// logger().setLevel(Logger::DEBUG);
			// logger().setPrintToStdoutFlag(true);
		}

		~MultiAtomSpace()
		{
			// erase the log file if no assertions failed
			if (!CxxTest::TestTracker::tracker().suiteFailed())
				std::remove(logger().getFilename().c_str());
		}

		void setUp(void);
		void tearDown(void);

		void test_two(void);
		void test_three(void);
		void test_load(void);
};

/*
 * This function sets up .. whatever.
 */
#define an as->addNode
#define al as->addLink
void MultiAtomSpace::setUp(void)
{
	server(CogServer::createInstance);
	evaluator = new SchemeEval(&cogserver().getAtomSpace());

	config().set("SCM_PRELOAD",
		"opencog/atomspace/core_types.scm, "
		"tests/scm/multispace.scm");

	cogserver().loadModules();
	cogserver().loadSCMModules();

}

void MultiAtomSpace::tearDown(void)
{
	delete evaluator;
	evaluator = NULL;
}

#define CHKERR \
	TSM_ASSERT("Caught scm error during eval", \
		(false == evaluator->eval_error()));
/*
 * Test assorted functions from opencog/scm/utilities.scm
 */

void MultiAtomSpace::test_two(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	// Populate atomspace with some misc junk
	evaluator->eval("(NumberNode \"42\")");
	evaluator->eval("(VariableNode \"$var\")");

	Handle h1 = evaluator->eval_h("(ConceptNode \"stuff\")");
	CHKERR;

	TSM_ASSERT("Failed to create atom", Handle::UNDEFINED != h1);
	TSM_ASSERT_EQUALS("Wrong atom type", CONCEPT_NODE, h1->getType());

	std::string msg = evaluator->eval("(dbg)");
	printf("Evaluation returned: %s\n", msg.c_str());

	Handle h2 = evaluator->eval_h("(func-env)");
	CHKERR;

	TSM_ASSERT("Failed to create atom", Handle::UNDEFINED != h2);
	TSM_ASSERT_EQUALS("Wrong atom type", CONCEPT_NODE, h2->getType());

	printf ("h1 = %lu %p\n", h1.value(), h1.operator->());
	printf ("h2 = %lu %p\n", h2.value(), h2.operator->());

	// h1 and h2 had better be different.
	TSM_ASSERT("Wrong handles", h1 != h2);

	logger().debug("END TEST: %s", __FUNCTION__);
}

#define CHKEV(ev) \
	TSM_ASSERT("Caught scm error during eval", \
		(false == ev->eval_error()));
void MultiAtomSpace::test_three(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	AtomSpace* as1 = new AtomSpace();
	AtomSpace* as2 = new AtomSpace();
	AtomSpace* as3 = new AtomSpace();
	SchemeEval* ev1 = new SchemeEval(as1);
	SchemeEval* ev2 = new SchemeEval(as2);
	SchemeEval* ev3 = new SchemeEval(as3);

	Handle h1 = ev1->eval_h("(cog-new-node 'ConceptNode \"stuff\")");
	CHKEV(ev1);
	TSM_ASSERT("Failed to create atom", Handle::UNDEFINED != h1);
	Handle h2 = ev2->eval_h("(cog-new-node 'ConceptNode \"stuff\")");
	CHKEV(ev2);
	TSM_ASSERT("Failed to create atom", Handle::UNDEFINED != h2);
	Handle h3 = ev3->eval_h("(cog-new-node 'ConceptNode \"stuff\")");
	CHKEV(ev3);
	TSM_ASSERT("Failed to create atom", Handle::UNDEFINED != h3);

	// We expect the handles to be all different, because they are
	// each in a different atomspace.
	TSM_ASSERT("Bad handles", h1 != h2);
	TSM_ASSERT("Bad handles", h1 != h3);
	TSM_ASSERT("Bad handles", h2 != h3);

	// The cogserver atomspace is a fourth place ...
	Handle h4 = evaluator->eval_h("(ConceptNode \"stuff\")");
	CHKERR;
	TSM_ASSERT("Failed to create atom", Handle::UNDEFINED != h4);
	TSM_ASSERT("Bad handles", h1 != h4);
	TSM_ASSERT("Bad handles", h2 != h4);
	TSM_ASSERT("Bad handles", h3 != h4);

	Handle h5 = ev2->eval_h("(cog-new-node 'ConceptNode \"solitary\")");
	CHKEV(ev2);
	TSM_ASSERT("Failed to create atom", Handle::UNDEFINED != h5);

	// We expect to not be able to find solitary anywhere but in as2
	Handle h6 = ev1->eval_h("(cog-node 'ConceptNode \"solitary\")");
	CHKEV(ev1);
	TSM_ASSERT("Did not expect to find atom", Handle::UNDEFINED == h6);

	Handle h7 = ev3->eval_h("(cog-node 'ConceptNode \"solitary\")");
	CHKEV(ev3);
	TSM_ASSERT("Did not expect to find atom", Handle::UNDEFINED == h7);

	Handle h8 = evaluator->eval_h("(cog-node 'ConceptNode \"solitary\")");
	CHKERR;
	TSM_ASSERT("Did not expect to find atom", Handle::UNDEFINED == h8);

	Handle h9 = ev2->eval_h("(cog-node 'ConceptNode \"solitary\")");
	CHKEV(ev2);
	TSM_ASSERT("Expect to find atom", h5 == h9);

	delete ev3;
	delete ev2;
	delete ev1;
	delete as3;
	delete as2;
	delete as1;
	logger().debug("END TEST: %s", __FUNCTION__);
}

void MultiAtomSpace::test_load(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	AtomSpace* as1 = new AtomSpace();
	AtomSpace* as2 = new AtomSpace();

   config().set("SCM_PRELOAD",
      "opencog/atomspace/core_types.scm, "
      "opencog/nlp/types/nlp_types.scm, "
      "opencog/scm/utilities.scm, "
	   "tests/scm/utils-test.scm");

	load_scm_files_from_config(*as1);
	load_scm_files_from_config(*as2);
	// load_scm_file(*as1, "tests/scm/utils-test.scm");
	// load_scm_file(*as2, "tests/scm/utils-test.scm");

	SchemeEval* ev1 = new SchemeEval(as1);
	SchemeEval* ev2 = new SchemeEval(as2);

	// The below is a complicated multi-atom-space version of part of 
	// the SCMUtilsUTest suite.  Different atoms in different spaces...
   // Increment a count tv in atomspace 1 ---------------------------------
   ev1->eval("(set! counter (ConceptNode \"asdf\"))");
   Handle counter1 = ev1->eval_h("counter");
	CHKEV(ev1);
	printf ("counter1 = %lu %p\n", counter1.value(), counter1.operator->());

   TSM_ASSERT("Failed to find atom", Handle::UNDEFINED != counter1);
   TSM_ASSERT_EQUALS("Wrong atom type", CONCEPT_NODE, counter1->getType());

   ev1->eval("(test-incr-cnt)");
	CHKEV(ev1);
   ev1->eval("(test-incr-cnt)");
	CHKEV(ev1);
   ev1->eval("(test-incr-cnt)");
	CHKEV(ev1);
   ev1->eval("(test-incr-cnt)");
	CHKEV(ev1);
   TruthValuePtr tv1 = counter1->getTruthValue();

   TSM_ASSERT_EQUALS("Wrong truth value type", COUNT_TRUTH_VALUE, tv1->getType());
   TSM_ASSERT_EQUALS("wrong count found", 4, (int)(tv1->getCount()));

   // Count tv in atomspace2 should be unscathed. ----------------------------
   ev2->eval("(set! counter (ConceptNode \"asdf\"))");
   Handle counter2 = ev2->eval_h("counter");
	CHKEV(ev2);
	printf ("counter2 = %lu %p\n", counter2.value(), counter2.operator->());

   TSM_ASSERT("Failed to find atom", Handle::UNDEFINED != counter2);
   TSM_ASSERT_EQUALS("Wrong atom type", CONCEPT_NODE, counter2->getType());

   TSM_ASSERT("Atoms fail to differ", counter1 != counter2);

   ev2->eval("(test-incr-cnt)");
	CHKEV(ev2);

   TruthValuePtr tv2 = counter2->getTruthValue();

   TSM_ASSERT_EQUALS("Wrong truth value type", COUNT_TRUTH_VALUE, tv2->getType());
   TSM_ASSERT_EQUALS("wrong count found", 1, (int)(tv2->getCount()));

   // Count tv in atomspace1 should be unscathed. ----------------------------
   ev1->eval("(set! counter (ConceptNode \"asdf\"))");
   Handle counter3 = ev1->eval_h("counter");
	CHKEV(ev1);
	printf ("counter3 = %lu %p\n", counter3.value(), counter3.operator->());

   TSM_ASSERT("Failed to find atom", Handle::UNDEFINED != counter3);
   TSM_ASSERT_EQUALS("Wrong atom type", CONCEPT_NODE, counter3->getType());

   TSM_ASSERT("Atoms should be same", counter1 == counter3);

   TruthValuePtr tv3 = counter3->getTruthValue();

   TSM_ASSERT_EQUALS("Wrong truth value type", COUNT_TRUTH_VALUE, tv3->getType());
   TSM_ASSERT_EQUALS("wrong count found", 4, (int)(tv3->getCount()));

	delete ev1;
	delete ev2;
	delete as1;
	delete as2;
	logger().debug("END TEST: %s", __FUNCTION__);
}
