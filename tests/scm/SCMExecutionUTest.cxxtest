/*
 * tests/scm/SCMExecutionUTest.cxxtest
 *
 * Copyright (C) 2014 Cosmo Harrigan
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/atomspace/AtomSpace.h>
#include <opencog/atomspace/Link.h>
#include <opencog/atomspace/Node.h>
#include <opencog/guile/SchemeSmob.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/guile/SchemePrimitive.h>
#include <opencog/server/CogServer.h>
#include <opencog/util/Logger.h>
#include <opencog/util/Config.h>
#include <opencog/execution/ExecutionLink.h>

using namespace opencog;

class SCMExecutionUTest :  public CxxTest::TestSuite
{
	private:
		AtomSpace *as;
		SchemeEval *eval;

	public:

	SCMExecutionUTest(void)
	{
		try
		{
			config().load("opencog-test.conf");
		}
		catch (RuntimeException &e)
		{
			std::cerr << e.getMessage() << std::endl;
		}
		logger().setFilename(config()["LOG_FILE"]);
		logger().setLevel(Logger::getLevelFromString(config()["LOG_LEVEL"]));
		logger().setPrintToStdoutFlag(config().get_bool("LOG_TO_STDOUT"));
                
                config().set("SCM_PRELOAD",
                        "opencog/atomspace/core_types.scm");
        
                cogserver().loadSCMModules();
	}

	~SCMExecutionUTest()
	{
		// erase the log file if no assertions failed
		if (!CxxTest::TestTracker::tracker().suiteFailed())
			std::remove(logger().getFilename().c_str());
	}

	void setUp(void);
	void tearDown(void);

	void testExecute(void);
};

void SCMExecutionUTest::setUp(void)
{
	server(CogServer::createInstance);
	as = &cogserver().getAtomSpace();
	eval = new SchemeEval(as);
}

void SCMExecutionUTest::tearDown(void)
{
	delete eval;
	eval = NULL;
}

void SCMExecutionUTest::testExecute(void)
{
        Handle julian = as->addNode(CONCEPT_NODE, "julian");
        Handle prince = as->addNode(CONCEPT_NODE, "prince");
        Handle king = as->addNode(CONCEPT_NODE, "king");
        as->addLink(INHERITANCE_LINK, julian, prince);

        // Define a Scheme procedure that will be used in the
        // GroundedSchemaNode
        eval->eval("(define (make-king x) (InheritanceLink x "
                   "(ConceptNode \"king\")))");
        
        // There is no king yet
        TS_ASSERT_EQUALS(as->getIncoming(king).size(), 0);

        // Use the "cog-execute!" command to fire an ExecutionLink directly
        // from the Scheme shell, containing a GroundedSchemaNode referring to 
        // the previously defined procedure
        eval->eval("(cog-execute! (ExecutionLink "
                   "(GroundedSchemaNode \"scm: make-king\") (ListLink "
                   "(ConceptNode \"julian\"))))");

        // Now there should be a king
        TS_ASSERT_EQUALS(as->getIncoming(king).size(), 1);
}
