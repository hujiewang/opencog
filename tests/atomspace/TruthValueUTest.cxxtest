/*
 * tests/atomspace/TruthValueUTest.cxxtest
 *
 * Copyright (C) 2002-2007 Novamente LLC
 * All Rights Reserved
 *
 * Written by Welter Silva <welter@vettalabs.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <math.h>

#include <opencog/atomspace/IndefiniteTruthValue.h>
#include <opencog/atomspace/SimpleTruthValue.h>
#include <opencog/atomspace/TruthValue.h>
#include <opencog/util/Logger.h>
#include <opencog/util/exceptions.h>

using namespace opencog;

#define NUM_TVS 3
#define TV1_MEAN 0.25f
#define TV1_COUNT 0.0f
#define TV2_MEAN 0.5f
#define TV2_COUNT 1.0f
#define TV3_MEAN 0.75f
#define TV3_COUNT 2.0f

#define TV1_L 0.0f
#define TV1_U 1.0f
#define TV2_L 0.25f
#define TV2_U 0.75f
#define TV3_L 0.5f
#define TV3_U 0.5f


// Converting from confidence to count and back again using single-precision
// float is a real accuracy killer.  In particular, 2/802 = 0.002494 but
// converting back gives 800*0.002494/(1.0-0.002494) = 2.000188 and so
// comparison tests can only be accurate to about 0.000188 or thereabouts.
#define FLOAT_ACCEPTABLE_ERROR 0.0002

class TruthValueUTest :  public CxxTest::TestSuite
{
private:

    TruthValue* tvs[NUM_TVS];
    float means[NUM_TVS];
    float counts[NUM_TVS];
    float confidences[NUM_TVS];

public:
    TruthValueUTest() {
        means[0] = TV1_MEAN;
        counts[0] = TV1_COUNT;
        confidences[0] = SimpleTruthValue::countToConfidence(counts[0]);

        TruthValue* tv = new IndefiniteTruthValue(TV2_L, TV2_U);
        means[1] = tv->getMean();
        counts[1] = tv->getCount();
        confidences[1] = tv->getConfidence();
        delete tv;

        means[2] = TV3_MEAN;
        counts[2] = TV3_COUNT;
        confidences[2] = SimpleTruthValue::countToConfidence(counts[2]);
    }

    void setUp() {
        tvs[0] = new SimpleTruthValue(means[0], counts[0]);
        tvs[1] = new IndefiniteTruthValue(TV2_L, TV2_U);
        tvs[2] = new SimpleTruthValue(means[2], counts[2]);
    }

    void tearDown() {
        for (int i = 0; i < NUM_TVS; i++) {
            delete tvs[i];
        }
    }

    void testMerge() {
        //logger().debug("testMerge()");
        TruthValuePtr mergedTv;
        TruthValuePtr simpleTvs[NUM_TVS];
        float simpleMeans[NUM_TVS];
        float simpleCounts[NUM_TVS];
        simpleMeans[0] = TV1_MEAN;
        simpleMeans[1] = TV2_MEAN;
        simpleMeans[2] = TV3_MEAN;
        simpleCounts[0] = TV1_COUNT;
        simpleCounts[1] = TV2_COUNT;
        simpleCounts[2] = TV3_COUNT;
        float simpleConfidences[NUM_TVS];
        for (int i = 0; i < NUM_TVS; i++) {
            simpleTvs[i] = SimpleTruthValue::createTV(simpleMeans[i], simpleCounts[i]);
            simpleConfidences[i] = SimpleTruthValue::countToConfidence(simpleCounts[i]);
        }
        // Merge between SimpleTruthValue objects
        for (int i = 0; i < NUM_TVS; i++) {
            for (int j = 0; j < NUM_TVS; j++) {
                mergedTv = simpleTvs[i]->merge(simpleTvs[j]);
                if (i < j) {
                    TS_ASSERT(mergedTv != simpleTvs[i]);
                    TS_ASSERT(mergedTv != simpleTvs[j]);
                    TS_ASSERT(fabs(mergedTv->getMean()  - simpleMeans[j]) <= FLOAT_ACCEPTABLE_ERROR);
                    //logger().debug("mergedTv->getCount() = %f, simpleCounts[j] = %f", mergedTv->getCount(), simpleCounts[j]);
                    TS_ASSERT(fabs(mergedTv->getCount()  - simpleCounts[j]) <= FLOAT_ACCEPTABLE_ERROR);
                    TS_ASSERT(fabs(mergedTv->getConfidence() - simpleConfidences[j] ) <= FLOAT_ACCEPTABLE_ERROR);
                } else {
                    TS_ASSERT(fabs(mergedTv->getMean()  - simpleMeans[i]) <= FLOAT_ACCEPTABLE_ERROR);
                    //logger().debug("mergedTv->getCount() = %f, simpleCounts[i] = %f", mergedTv->getCount(), simpleCounts[i]);
                    TS_ASSERT(fabs(mergedTv->getCount()  - simpleCounts[i]) <= FLOAT_ACCEPTABLE_ERROR);
                    TS_ASSERT(fabs(mergedTv->getConfidence() - simpleConfidences[i] ) <= FLOAT_ACCEPTABLE_ERROR);
                }
            }
        }

        // Merge with other types of TV
        float lowerConfidence = simpleConfidences[1] - 0.01f;
        float upperConfidence = simpleConfidences[1] + 0.01f;
        TruthValuePtr otherTypeTv;
        // Merging SimpleTruthValue objects
        otherTypeTv = SimpleTruthValue::createTV(0.333f, SimpleTruthValue::confidenceToCount(lowerConfidence));
        mergedTv = simpleTvs[1]->merge(otherTypeTv);
        TS_ASSERT(mergedTv != simpleTvs[1]);
        TS_ASSERT(mergedTv != otherTypeTv);
        TS_ASSERT(mergedTv->getType() == otherTypeTv->getType());
        TS_ASSERT(fabs(mergedTv->getMean()  - simpleMeans[1]) <= FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(fabs(mergedTv->getCount()  - simpleCounts[1]) <= FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(fabs(mergedTv->getConfidence() - simpleConfidences[1]) < FLOAT_ACCEPTABLE_ERROR);
        otherTypeTv = SimpleTruthValue::createTV(0.333f, SimpleTruthValue::confidenceToCount(upperConfidence));
        mergedTv = simpleTvs[1]->merge(otherTypeTv);
        TS_ASSERT(mergedTv != simpleTvs[1]);
        TS_ASSERT(mergedTv != otherTypeTv);
        TS_ASSERT(mergedTv->getType() == otherTypeTv->getType());
        TS_ASSERT(fabs(mergedTv->getMean()  - otherTypeTv->getMean()) <= FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(fabs(mergedTv->getCount()  - otherTypeTv->getCount()) <= FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(fabs(mergedTv->getConfidence() - otherTypeTv->getConfidence()) < FLOAT_ACCEPTABLE_ERROR);

        // Merge calling merge() of all types of TVs.
        TruthValuePtr indefiniteTvs[NUM_TVS];
        float indefiniteLs[NUM_TVS];
        float indefiniteUs[NUM_TVS];
        indefiniteLs[0] = TV1_L;
        indefiniteLs[1] = TV2_L;
        indefiniteLs[2] = TV3_L;
        indefiniteUs[0] = TV1_U;
        indefiniteUs[1] = TV2_U;
        indefiniteUs[2] = TV3_U;
        float indefiniteMeans[NUM_TVS];
        float indefiniteCounts[NUM_TVS];
        float indefiniteConfidences[NUM_TVS];
        for (int i = 0; i < NUM_TVS; i++) {
            indefiniteTvs[i] = IndefiniteTruthValue::createTV(indefiniteLs[i], indefiniteUs[i]);
            indefiniteMeans[i] = indefiniteTvs[i]->getMean();
            indefiniteCounts[i] = indefiniteTvs[i]->getCount();
            indefiniteConfidences[i] = indefiniteTvs[i]->getConfidence();
        }
        for (int i = 0; i < NUM_TVS; i++) {
            //logger().debug("calling indefiniteTvs[%d]->merge(...)", i);
            TruthValue* tv = tvs[i];
            TruthValuePtr indefiniteTv = indefiniteTvs[i];
            TruthValuePtr mergedTv = tv->merge(indefiniteTv);
            if (indefiniteConfidences[i] > confidences[i]) {
                TS_ASSERT(mergedTv != indefiniteTv);
                TS_ASSERT(fabs(mergedTv->getMean()  - indefiniteMeans[i]) <= FLOAT_ACCEPTABLE_ERROR);
                //logger().debug("mergedTv->getCount() =%f, indefiniteCounts[i] = %f", mergedTv->getCount(), indefiniteCounts[i]);
                // Counts can be huge.  So take a ratio, and count significant digits.
                TS_ASSERT(fabs((mergedTv->getCount() / indefiniteCounts[i]) - 1.0d) < 0.000001);

                TS_ASSERT(fabs(mergedTv->getConfidence() - indefiniteConfidences[i]) < FLOAT_ACCEPTABLE_ERROR);
                TS_ASSERT(mergedTv.get() != tv);
                TS_ASSERT(mergedTv->getType() == INDEFINITE_TRUTH_VALUE);
            } else {
                //logger().debug("mergedTv->getType() = %d(%s), tv->getType() = %d(%s)", mergedTv->getType(), TruthValue::typeToStr(mergedTv->getType()), tv->getType(), TruthValue::typeToStr(tv->getType()).c_str());
                TS_ASSERT(mergedTv->getType() == tv->getType());
                TS_ASSERT(fabs(mergedTv->getMean()  - means[i]) <= FLOAT_ACCEPTABLE_ERROR);
                TS_ASSERT(fabs(mergedTv->getCount()  - counts[i]) <= FLOAT_ACCEPTABLE_ERROR);
                TS_ASSERT(fabs(mergedTv->getConfidence() - confidences[i]) < FLOAT_ACCEPTABLE_ERROR);
            }
        }
    }

    void testIsNullTv() {
        for (int i = 0; i < NUM_TVS; i++) {
            TS_ASSERT(!(tvs[i]->isNullTv()));
        }
        TS_ASSERT(TruthValue::NULL_TV()->isNullTv());
        TS_ASSERT(not TruthValue::DEFAULT_TV()->isNullTv());
        TS_ASSERT(not TruthValue::TRUE_TV()->isNullTv());
        TS_ASSERT(not TruthValue::FALSE_TV()->isNullTv());
        TS_ASSERT(not TruthValue::TRIVIAL_TV()->isNullTv());
    }
};
